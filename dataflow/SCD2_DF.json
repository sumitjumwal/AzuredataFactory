{
	"name": "SCD2_DF",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"linkedService": {
						"referenceName": "SQL_Sample_database",
						"type": "LinkedServiceReference"
					},
					"name": "Destination"
				},
				{
					"linkedService": {
						"referenceName": "SQL_Sample_database",
						"type": "LinkedServiceReference"
					},
					"name": "source"
				}
			],
			"sinks": [
				{
					"linkedService": {
						"referenceName": "SQL_Sample_database",
						"type": "LinkedServiceReference"
					},
					"name": "InsertEvrything"
				},
				{
					"linkedService": {
						"referenceName": "SQL_Sample_database",
						"type": "LinkedServiceReference"
					},
					"name": "UpdateFlagwhenexist"
				}
			],
			"transformations": [
				{
					"name": "join1"
				},
				{
					"name": "select1"
				},
				{
					"name": "SourceFlag"
				},
				{
					"name": "filter2"
				},
				{
					"name": "alterRow1"
				},
				{
					"name": "derivedColumn1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          CustomerID as integer,",
				"          NameStyle as boolean,",
				"          Title as string,",
				"          FirstName as string,",
				"          MiddleName as string,",
				"          LastName as string,",
				"          Suffix as string,",
				"          CompanyName as string,",
				"          SalesPerson as string,",
				"          EmailAddress as string,",
				"          Phone as string,",
				"          PasswordHash as string,",
				"          PasswordSalt as string,",
				"          rowguid as string,",
				"          ModifiedDate as timestamp,",
				"          Flag as long",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table',",
				"     store: 'sqlserver',",
				"     schemaName: 'SalesLT',",
				"     tableName: 'destination',",
				"     isolationLevel: 'READ_UNCOMMITTED') ~> Destination",
				"source(output(",
				"          CustomerID as integer,",
				"          NameStyle as boolean,",
				"          Title as string,",
				"          FirstName as string,",
				"          MiddleName as string,",
				"          LastName as string,",
				"          Suffix as string,",
				"          CompanyName as string,",
				"          SalesPerson as string,",
				"          EmailAddress as string,",
				"          Phone as string,",
				"          PasswordHash as string,",
				"          PasswordSalt as string,",
				"          rowguid as string,",
				"          ModifiedDate as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table',",
				"     store: 'sqlserver',",
				"     schemaName: 'SalesLT',",
				"     tableName: 'Source',",
				"     isolationLevel: 'READ_UNCOMMITTED') ~> source",
				"source, Destination join(source@CustomerID == Destination@CustomerID,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"join1 select(mapColumn(",
				"          CustomerID = source@CustomerID,",
				"          NameStyle = source@NameStyle,",
				"          Title = source@Title,",
				"          FirstName = source@FirstName,",
				"          MiddleName = source@MiddleName,",
				"          LastName = source@LastName,",
				"          Suffix = source@Suffix,",
				"          CompanyName = source@CompanyName,",
				"          SalesPerson = source@SalesPerson,",
				"          EmailAddress = source@EmailAddress,",
				"          Phone = source@Phone,",
				"          PasswordHash = source@PasswordHash,",
				"          PasswordSalt = source@PasswordSalt,",
				"          rowguid = source@rowguid,",
				"          ModifiedDate = source@ModifiedDate,",
				"          destFlag = Flag",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> select1",
				"select1 derive(SourceColumn = 1) ~> SourceFlag",
				"select1 filter(destFlag == 1) ~> filter2",
				"filter2 alterRow(updateIf(1==1)) ~> alterRow1",
				"alterRow1 derive(Flag = 0) ~> derivedColumn1",
				"SourceFlag sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          CustomerID as integer,",
				"          NameStyle as boolean,",
				"          Title as string,",
				"          FirstName as string,",
				"          MiddleName as string,",
				"          LastName as string,",
				"          Suffix as string,",
				"          CompanyName as string,",
				"          SalesPerson as string,",
				"          EmailAddress as string,",
				"          Phone as string,",
				"          PasswordHash as string,",
				"          PasswordSalt as string,",
				"          rowguid as string,",
				"          ModifiedDate as timestamp,",
				"          Flag as string",
				"     ),",
				"     format: 'table',",
				"     store: 'sqlserver',",
				"     schemaName: 'SalesLT',",
				"     tableName: 'destination',",
				"     insertable: true,",
				"     updateable: false,",
				"     deletable: false,",
				"     upsertable: false,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     saveOrder: 2,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          CustomerID,",
				"          NameStyle,",
				"          Title,",
				"          FirstName,",
				"          MiddleName,",
				"          LastName,",
				"          Suffix,",
				"          CompanyName,",
				"          SalesPerson,",
				"          EmailAddress,",
				"          Phone,",
				"          PasswordHash,",
				"          PasswordSalt,",
				"          rowguid,",
				"          ModifiedDate,",
				"          Flag = SourceColumn",
				"     )) ~> InsertEvrything",
				"derivedColumn1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          CustomerID as integer,",
				"          NameStyle as boolean,",
				"          Title as string,",
				"          FirstName as string,",
				"          MiddleName as string,",
				"          LastName as string,",
				"          Suffix as string,",
				"          CompanyName as string,",
				"          SalesPerson as string,",
				"          EmailAddress as string,",
				"          Phone as string,",
				"          PasswordHash as string,",
				"          PasswordSalt as string,",
				"          rowguid as string,",
				"          ModifiedDate as timestamp,",
				"          Flag as string",
				"     ),",
				"     format: 'table',",
				"     store: 'sqlserver',",
				"     schemaName: 'SalesLT',",
				"     tableName: 'destination',",
				"     insertable: false,",
				"     updateable: true,",
				"     deletable: false,",
				"     upsertable: false,",
				"     keys:['CustomerID'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     saveOrder: 1,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          CustomerID,",
				"          NameStyle,",
				"          Title,",
				"          FirstName,",
				"          MiddleName,",
				"          LastName,",
				"          Suffix,",
				"          CompanyName,",
				"          SalesPerson,",
				"          EmailAddress,",
				"          Phone,",
				"          PasswordHash,",
				"          PasswordSalt,",
				"          rowguid,",
				"          ModifiedDate,",
				"          Flag",
				"     )) ~> UpdateFlagwhenexist"
			]
		}
	}
}